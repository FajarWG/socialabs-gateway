# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ProjectStatusType {
  topic_modelling: Boolean!
  sentiment: Boolean!
  emotion: Boolean!
  sna: Boolean!
  _id: String!
}

type ProjectResults {
  projects: [ProjectType!]!
  total: Float!
  page: Float!
  limit: Float!
}

type ProjectType {
  _id: String!
  title: String!
  description: String!
  keyword: String!
  userId: String!
  topic_category: String!
  language: String!
  start_date_crawl: String!
  end_date_crawl: String!
  createdAt: String!
  project_status: ProjectStatusType!
}

type AuthResponse {
  message: String!
  accessToken: String!
  refreshToken: String!
}

type RegisterResponse {
  message: String!
}

type LoginResponse {
  message: String!
  accessToken: String!
  refreshToken: String!
}

type User {
  _id: String!
  email: String!
  name: String!
}

type CrawlingResponse {
  data: String!
  filename: String!
}

type EmotionProbability {
  Anger: Float!
  Fear: Float!
  Joy: Float!
  Love: Float!
  Neutral: Float!
  Sad: Float!
}

type VisualizeEmotionResponse {
  emotion: [InsideEmotionVisualize!]!
  emotion_percentage: EmotionProbability!
  emotion_percentage_by_topic: EmotionProbability!
  total_data: Float!
}

type InsideEmotionVisualize {
  _id: String!
  conversation_id_str: String!
  full_text: String!
  id_str: String!
  in_reply_to_screen_name: String!
  predicted_emotions_bilstm: String!
  predicted_emotions_bilstm_probability: EmotionProbability!
  predicted_emotions_cnn: String!
  predicted_emotions_cnn_probability: EmotionProbability!
  processed_text: String!
  projectId: String!
  topic: String!
  tweet_url: String!
}

type ClassifyEmotionResponse {
  success: Boolean!
  total_data: Float!
  data: String!
}

type InsideBuzzerData {
  BEC: Float!
  BEC_Norm: Float!
  EVC: Float!
  final_measure: Float!
  node: String!
  projectId: String!
  tweet_url: String!
}

type BuzzerByIdResponse {
  data: [InsideBuzzerData!]!
  total_data: Float!
}

type CommunityByIdResponse {
  data: [InsideCommunityData!]!
  total_data: Float!
}

type LinkCommunity {
  full_text: String!
  source: String!
  source_community: Float!
  target: String!
  target_community: Float!
  topic: String!
  url_tweet: String!
}

type NodeCommunity {
  community: Float!
  id: String!
  name: String!
  profile_url: String!
  val: Float!
}

type InsideCommunityData {
  links: [LinkCommunity!]!
  nodes: [NodeCommunity!]!
}

type SentimentPercentage {
  positive: Float!
  negative: Float!
}

type SentimentPercentageByTopic {
  positive: Float!
  negative: Float!
}

type VisualizeSentimentResponse {
  sentiment: [InsideSentimentVisualize!]!
  sentiment_percentage: SentimentPercentage!
  sentiment_percentage_by_topic: SentimentPercentageByTopic!
  total_data: Float!
}

type InsideSentimentVisualize {
  conversation_id_str: String!
  full_text: String!
  id_str: String!
  in_reply_to_screen_name: String!
  predicted_sentiment_cnn: String!
  predicted_sentiment_cnn_lstm: String!
  predicted_sentiment_cnn_lstm_probability: String!
  predicted_sentiment_cnn_probability: String!
  probability: String!
  processed_text: String!
  projectId: String!
  topic: String!
  tweet_url: String!
  user_id_str: String!
  username: String!
  _id: String!
}

type ClassifySentimentResponse {
  success: Boolean!
  total_data: Float!
  data: String!
}

type TopicResponse {
  topic: String!
  context: String!
  interpretation: String!
  document_topic: String!
}

type TopicDocument {
  full_text: String!
  topic: String!
  tweet_url: String!
  username: String!
}

type TopicDocByProjectResponse {
  data: [TopicDocument!]!
}

type TopicByProjectResponse {
  context: String!
  keyword: String!
  projectId: String!
  topicId: Float!
  words: [String!]!
}

type Query {
  getProject(id: String!): ProjectType!
  getAllProjects(userId: String!, page: Int!, limit: Int!, name: String! = " "): ProjectResults!
  getByKeyword(keyword: String!, start_date: String!, end_date: String!): String!
  getPrompt(project_id: String!): String!
  visualizeEmotion(topic: String!, project_id: String!, model_type: String!): VisualizeEmotionResponse!
  visualizeSentiment(topic: String!, project_id: String!, model_type: String!): VisualizeSentimentResponse!
  getGraph(keyword: String!, num_topics: Float!, num_tweets: Float!, topic: String!): InsideCommunityData!
  getCommunity(keyword: String!, num_topics: Float!, num_tweets: Float!, topic: String!): InsideCommunityData!
  getBuzzerByProject(project_id: String!): BuzzerByIdResponse!
  getCommunityByProject(project_id: String!): CommunityByIdResponse!
  topicByProject(project_id: String!): TopicByProjectResponse!
  topicDocByProject(project_id: String!): TopicDocByProjectResponse!
}

type Mutation {
  createProject(category: String!, description: String!, end_date_crawl: String!, keyword: String!, language: String!, start_date_crawl: String!, title: String!): ProjectType!
  updateProjectStatus(id: String!, projectStatus: ProjectStatusInput!): ProjectType!
  login(email: String!, password: String!): LoginResponse!
  register(email: String!, name: String!, password: String!, confirmPassword: String!): RegisterResponse!
  generateToken(refreshToken: String!): AuthResponse!
  logout: String!
  currentUser: User!
  crawling(access_token: String!, keywords: String!, total_tweet: Float!, projectId: String!): CrawlingResponse!
  postQuery(query: String!, project_id: String!): CrawlingResponse!
  classifyEmotion(tweet_ids: String!): ClassifyEmotionResponse!
  classifySentiment(tweet_ids: String!): ClassifySentimentResponse!
  topicRoute(keyword: String!, start_date: String!, end_date: String!): TopicResponse!
}

input ProjectStatusInput {
  topic_modelling: Boolean
  sentiment: Boolean
  emotion: Boolean
  sna: Boolean
}